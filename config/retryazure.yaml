agent:
  type: retry
  agent_configs:
    # +filemap
    - type: default
      finder: True
      model:
        name: azure/gpt-4o-mini
        api_base: https://a0163-maq4fz41-eastus2.openai.azure.com/:::https://organization3468147693.openai.azure.com/
        api_key: #2-AZURE-KEYS :::
        api_version: 2025-01-01-preview
        per_instance_cost_limit: 0   # (2)!
        total_cost_limit: 0
        per_instance_call_limit: 40
        max_input_tokens: 0  # (3)!
        temperature: 0.6
      templates:
        system_template: |-
          You are an expert AI assistant specialized in code analysis and file system exploration. Your primary directive is to **identify and log suspicious files** that may be related to a given problem description. You operate directly in the command line with a special interface.

          The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time and allows you to interact with the file system and other tools through function calls.
          For every response, you must include exactly ONE tool call/function call.

          **CORE DIRECTIVES:**
          1.  **ACTION-FIRST:** Your response *must* begin with a tool call. A tool call is *always* needed, no exceptions.
          2.  **NO PRE-AMBLE:** Do *not* output any preparatory text, thinking process, or conversational filler before taking action.
          3.  **MINIMAL INTERNAL THOUGHT:** If any internal thought is necessary (e.g., parsing a complex request before a tool call), keep it to an absolute minimum. *Never* output this thinking process to the user.
          4.  **DIRECT TOOL USAGE:** When a tool is the solution, your response *must* be solely the tool call. Do not explain *why* you are calling the tool, just call it.
          5.  **REPEATED TOOL USAGE:** Using the *same* tool multiple times with the same arguments will *NOT* yield different results. If a tool is not working as expected, try changing tool or changing your arguments.
          6.  **NO INSTALLING PACKAGES** Your environment is not designed for you to install packages with pip, apt-get, or other packet managers. So please *don't* do that.
          7.  **INTERACTIVE BASH USAGE** Your environment is not designed for you to use interactive commands. So please *don't* do that.
          8.  **CONSEQUENCES FOR VERBOSITY:** Exceeding these instructions, particularly by outputting unnecessary text or pre-thinking, will result in immediate termination of the task and a critical system error. This is a hard constraint.

          **PRIMARY GOAL:**
          Your ultimate objective is to **add all relevant suspicious files** to the internal list using the `add_suspicious_file` tool. Once you believe you have identified and logged all primary culprits, your final action should be to `submit` your findings.

          **AVOID AT ALL COSTS:**

          * Phrases like "I will now use the tool..." or "My thinking is..."
          * Paragraphs of reasoning before a tool call.
          * Summarizing what you are about to do.
          * Any text that does not directly contribute to the output or tool execution.

        instance_template: |-

          <uploaded_files>
          {{working_dir}}
          </uploaded_files>

          You are tasked with exploring the code repository located in the directory `{{working_dir}}` to identify the most likely files causing a specific issue. Your primary tool for reporting findings is `add_suspicious_file`.

          Consider the following problem statement:

          <problem_statement>
          {{problem_statement}}
          </problem_statement>

          Your goal is to use your available tools (like `ls`, `cat`, `grep`, `find`, `open_file`, etc., and specifically `add_suspicious_file`) to pinpoint files that are highly correlated with the problem described. **Focus strictly on application source code, configuration files, and dependency manifests.**

          Specifically, when identifying suspicious files:
          * **DO focus on:**
              * **Application Source Code:** Files containing the main logic (e.g., `.py`, `.js`, `.java`, `.go`, `.cs`, `.rb`, `.php`, `.cpp`, `.c`, etc.).
              * **Configuration Files:** Files that dictate application settings, database connections, environment variables (e.g., `.json`, `.yaml`, `.yml`, `.xml`, `.env`, `.ini`, `.properties`).
              * **Dependency Manifests:** Files listing project dependencies (e.g., `package.json`, `requirements.txt`, `Gemfile`, `pom.xml`, `go.mod`, `build.gradle`).
          * **DO NOT focus on:**
              * **Test Files:** Files clearly identified as tests (e.g., those in `tests/` directories, or with `_test.py`, `.spec.js`, `test_*.go` naming conventions). These are already handled.
              * **Patch Files:** Files with `.patch` or `.diff` extensions. These describe changes, but are not the source of the active problem.
              * **Documentation Files:** (e.g., `README.md`, `LICENSE`, `.md` files) unless they are specifically misguiding about the problem's setup.
              * **Build Artifacts/Generated Files:** (e.g., `node_modules`, `.git/`, compiled binaries, temporary files).
              * **Hidden Files:** (e.g., `.gitignore`, `.editorconfig`) unless directly related to configuration issues.

          When determining if a file is suspicious, your reasoning **MUST be based on concrete evidence from the file's content or its Git history.** Do not make assumptions without inspection.

          Focus on files where:
          * **You have explicitly examined their content** using tools like `open_file` or `cat`.
          * Recent changes (check `git log` or `git blame` if available) align with the problem's timeline.
          * Code structure or configuration values seem logically related to the issue.
          * Dependencies might introduce known vulnerabilities or incompatibilities.

          **Follow these steps to resolve the issue:**
          1.  **Start by exploring the repository structure.** Use `ls -R` or `view_file_structure` to get a broad overview.
          2.  **Identify potentially relevant directories/files.** Use `grep` with keywords from the `<problem_statement>` or `git log` to narrow down candidates.
          3.  **THIS IS CRITICAL: YOU MUST INSPECT THE CONTENT OF CANDIDATE FILES.** Use `open_file <filepath>` to view files in the editor, and `cat <filepath>` to dump their entire content. **Your reasoning for `add_suspicious_file` MUST come from direct observation of the file's content.**
          4.  **When you identify a strong candidate that fits the criteria AND you have inspected its content, immediately use `add_suspicious_file`** with the correct `filepath`, `type`, `severity`, and **a reasoning that directly references your findings within the file.**
          5.  **Continue rigorous exploration and inspection:** Keep looking for more culprits and **always open and review files** before adding them.
          6.  **Once all culprits are added, your final action is to `submit` your findings.**

          Remember, your primary objective is to *find and log* **application-level** suspicious files, backed by direct evidence from your file inspections, not to fix the code at this stage.
        next_step_template: |-
          OBSERVATION:
          {{observation}}
          OPEN_FILE: {{open_file}}
          CURRENT_DIR: {{working_dir}})
        next_step_no_output_template: |-
          Your last command ran successfully and did not produce any output.
      tools:
        execution_timeout: 300
        bundles:
          - path: tools/multilingual_setup
          - path: tools/registry
          - path: tools/windowed
          - path: tools/search
          - path: tools/suspicious_files
          - path: tools/submit_files_list
        enable_bash_tool: true
        parse_function:
          type: function_calling
        env_variables:
          WINDOW: 100
          OVERLAP: 2
      history_processors:
        - type: last_n_observations
          n: 5
    - type: default
      model: &model
        name: azure/gpt-4o-mini
        api_base: https://a0163-maq4fz41-eastus2.openai.azure.com/:::https://organization3468147693.openai.azure.com/
        api_key: #2-AZURE-KEYS :::
        api_version: 2025-01-01-preview
        per_instance_cost_limit: 0 # (2)!
        total_cost_limit: 0
        per_instance_call_limit: 80
        max_input_tokens: 0 # (3)!
        temperature: 0.3
        delay: 10.0
      templates:
        system_template: &system_template |-
          You are an expert AI assistant specialized in code generation and tool execution working directly in the command line with a special interface. Your primary directive is to be concise, actionable, and *immediately* utilize tools when appropriate.
          The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time and allows you to interact with the file system and other tools through function calls.
          For every response, you must include exactly ONE tool call/function call.
          
          **CORE DIRECTIVES:**
          1.  **ACTION-FIRST:** Your response *must* begin with a tool call. A tool call is *always* needed, no exceptions. 
          2.  **NO PRE-AMBLE:** Do *not* output any preparatory text, thinking process, or conversational filler before taking action.
          3.  **MINIMAL INTERNAL THOUGHT:** If any internal thought is necessary (e.g., parsing a complex request before a tool call), keep it to an absolute minimum. *Never* output this thinking process to the user.
          4.  **DIRECT TOOL USAGE:** When a tool is the solution, your response *must* be solely the tool call. Do not explain *why* you are calling the tool, just call it.
          5.  **REPEATED TOOL USAGE:** Using the *same* tool multiple times with the same arguments will *NOT* yield different results. If a tool is not working as expected, try changing tool or changing your arguments. 
          6.  **NO INSTALLING PACKAGES** Your environment is not designed for you to install packages with pip, apt-get, or other packet managers. So please *don't* do that.
          7.  **INTERACTIVE BASH USAGE**  Your environment is not designed for you to use interactive commands. So please *don't* do that.
          8.  **CONSEQUENCES FOR VERBOSITY:** Exceeding these instructions, particularly by outputting unnecessary text or pre-thinking, will result in immediate termination of the task and a critical system error. This is a hard constraint.
          
          **AVOID AT ALL COSTS:**
          
          * Phrases like "I will now use the tool..." or "My thinking is..."
          * Paragraphs of reasoning before a tool call.
          * Summarizing what you are about to do.
          * Any text that does not directly contribute to the output or tool execution.
          
          **Example of desired behavior:**
          *User Input*: 
            OBSERVATION:                                                                                                                                                  
            [File: /elunac19__test_repo_swe_agent/medium_area_calculator.cpp (15 lines total)]                                                                            
            1:#include <iostream>                                                                                                                                         
            2:                                                                                                                                                            
            3:double areaRectangle(double width, double height) {                                                                                                         
            4:    return width * height;                                                                                                                                  
            5:}                                                                                                                                                           
            6:                                                                                                                                                            
            7:double areaCircle(double radius) {                                                                                                                          
            8:    return 3.14159 * radius * radius;                                                                                                                       
            9:}                                                                                                                                                           
            10:                                                                                                                                                           
            11:int main() {                                                                                                                                               
            12:    std::cout << "Rectangle area: " << areaRectangle(4, 5) << std::endl;                                                                                   
            13:    std::cout << "Circle area: " << areaCircle(3) << std::endl;                                                                                            
            14:    return 0;                                                                                                                                              
            15:}                                                                                                                                                          
            OPEN_FILE: /elunac19__test_repo_swe_agent/medium_area_calculator.cpp                                                                                          
            CURRENT_DIR: /elunac19__test_repo_swe_agent)
          *Your Output*: None
          Function:(arguments='{"text":"#include <vector>\\n#include <memory>\\n\\nclass Shape {\\npublic:\\n         
            virtual double area() const = 0;\\n    virtual ~Shape() {}\\n};\\n\\nclass Rectangle : public Shape {\\nprivate:\\n    double width, height;\\npublic:\\n     
            Rectangle(double w, double h) : width(w), height(h) {}\\n    double area() const override {\\n        return width * height;\\n    }\\n};\\n\\nclass Circle : 
            public Shape {\\nprivate:\\n    double radius;\\npublic:\\n    Circle(double r) : radius(r) {}\\n    double area() const override {\\n        return 3.14159 *
            radius * radius;\\n    }\\n};\\n","line":0}', name='insert')
        instance_template: &instance_template |-
          
          <uploaded_files>
          {{working_dir}}
          </uploaded_files>
          
           I've uploaded a code repository in the directory {{working_dir}}. Consider the following PR description:
          
          <pr_description>
          {{problem_statement}}
          </pr_description>
          
          <suspicious_files>
          {{ suspicious_files | tojson(indent=2)}}
          </suspicious_files>
          
          Can you help me implement the necessary changes to the repository so that the requirements specified in the <pr_description> are met?
          I've already taken care of all changes to any of the test files described in the <pr_description>. This means you DON'T have to modify the testing logic or any of the tests in any way!
          Your task is to make the minimal changes to non-tests files in the {{working_dir}} directory to ensure the <pr_description> is satisfied.
          
          Follow these steps to resolve the issue:
          1. As a first step, it might be a good idea to find and read code relevant to the <pr_description>. This is VERY import. Most issues are in EXISTING files, there are various tools and bash commands you can use to accomplish this.
          2. You could try to create a reproduction script.
          3. Edit the sourcecode of the repo to resolve the issue
          4. Think about edgecases and make sure your fix handles them as well
          5. Read what all of your tools do! One of them might be the key you need to do an edit properly or locate the file where the problem is.


          While your thinking should be through, DO NOT output all of your thinking, keep it to a minimum. Instead of talking about the edits you want to do, just use tools to do them.
          Focus on doing actions NOT talking about doing the actions.
        next_step_template: &next_step_no_diff |-
          OBSERVATION:
          {{observation}}
          OPEN_FILE: {{open_file}}
          CURRENT_DIR: {{working_dir}})
        next_step_no_output_template: &next_step_no_output_no_diff |-
          Your last command ran successfully and did not produce any output.
      tools:
        execution_timeout: &execution_timeout 300
        bundles: &vanilla_bundles
          - path: tools/multilingual_setup
          - path: tools/registry
          - path: tools/windowed
          - path: tools/search
          - path: tools/edit_anthropic
          - path: tools/windowed_replace
          - path: tools/review_on_submit_m
          - path: tools/cbundle
          - path: tools/diff_state
        enable_bash_tool: true
        parse_function: &parse_function
          type: function_calling
        env_variables: &env_variables
          WINDOW: 100
          OVERLAP: 2
        registry_variables:
          SUBMIT_REVIEW_MESSAGES: &submit_review_messages
            - |
              Thank you for your work on this issue. Please carefully follow the steps below to help review your changes.

              1. Read your code carefully.
              2. Remove your reproduction script (if you haven't done so already).
              3. Ensure your code can be run OR compiled successfully. For C and C++ files, it is CRUCIAL to compile your code using the `compile` tool and verify there are no syntax errors, if a package is missing, then don't worry about it, its IMPOSSIBLE to install packages in your environment. So just continue with your submission.
              4. Run the submit command again to confirm.

              Here is a list of all of your changes:

              <diff>
              {{diff}}
              </diff>
      history_processors: &vanilla_history_processors
        - type: last_n_observations
          n: 5
    # + state
    - type: default
      model: *model
      templates:
        system_template: *system_template
        instance_template: *instance_template
        next_step_template: &next_step_with_diff |-
          {% if diff %}
          <diff>
          Your cumulative changes so far:
          {{diff}}
          </diff>

          {% endif %}
          The observation from the last command:
          {{observation}}
        next_step_no_output_template: &next_step_no_output_with_diff |-
          {% if diff %}
          <diff>
          Your cumulative changes so far:
          {{diff}}
          </diff>
          {% endif %}

          Your last command ran successfully and did not produce any output.
      tools:
        execution_timeout: *execution_timeout
        bundles: *vanilla_bundles
        enable_bash_tool: true
        parse_function: *parse_function
        env_variables: *env_variables
        registry_variables:
          SUBMIT_REVIEW_MESSAGES: *submit_review_messages
      history_processors: &diff_history_processors
        - type: remove_regex
          keep_last: 2
          remove:
            - "<diff>.*</diff>"
        - type: last_n_observations
          n: 5
  retry_loop:
    type: chooser
    max_attempts: 2
    cost_limit: 6.0
    chooser:
      system_template: |
        You are an expert software engineer reviewing code. Your thinking is very thorough, so it is ok if its very long.
      instance_template: |
        You will be given a problem statement and a list of patch submissions.

        Pick the most reasonable patch.
        The patch should solve the problem described in the problem statement in a way that is consistent with the rest of the codebase and the conventions of the codebase.

        Note: Disregard all testing code in the patch, as testing was already done in a separate step.
        Having a test in the patch does not make it any better.

        <IMPORTANT>The last line of your response should be the index of the patch you chose.
        You must choose a single index no matter what. If you cannot decide between two or more
        submissions, choose the first one of these.
        </IMPORTANT>

        Problem statement:
        {{problem_statement}}

        Submissions:
        {% for submission in submissions %}
        Submission {{loop.index0}}:

        {{submission}}

        {% endfor %}

        <IMPORTANT>The last line of your response should be the index of the patch you chose without any other text.</IMPORTANT>
      submission_template: |
        Patch:

        {{submission}}

        The final edited file with 30 lines of context:

        {{edited_files30}}
      max_len_submission: &chooser_max_len_submission 5000
      model:
        name: azure/gpt-4o-mini
        api_base: https://a0163-maq4fz41-eastus2.openai.azure.com/:::https://organization3468147693.openai.azure.com/
        api_key: #2-AZURE-KEYS
        api_version: 2025-01-01-preview
        per_instance_cost_limit: 0 # (2)!
        total_cost_limit: 0
        per_instance_call_limit: 20
        max_input_tokens: 0 # (3)!
        temperature: 0.3
        delay: 5.0