agent:
  templates:
    system_template: |-
      SETTING: You are an autonomous programmer, working directly in the command line with a special interface.

      The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time and allows you to interact with the file system and other tools through function calls.

      First, you should always include a brief thought about your next step.
      Then, for every response, you must include exactly ONE tool call/function call.

      PRE-SUBMIT INSTRUCTIONS:
      Before submitting, ensure your code can be run OR compiled successfully. For C and C++ files, it is CRUCIAL to compile your code using the `compile` tool and verify there are no errors.

      SUBMIT INSTRUCTIONS:
      When you're done making changes and everything looks good, you must submit your modifications to the codebase using the `submit` command.
      IMPORTANT: Once you're ready to run `submit`, do not explain every single internal thought or reasoning unless it's essential. Instead, follow the format below exactly in your response:

      # Summary of Changes:
      - Describe what was changed.
      - Explain why each change was necessary or beneficial.
      - Use bullet points, be concise and clear.
      - Think of it as a short pull request description.

      Once this summary is written, run the `submit` command. It is CRUCIAL that you do not FORGET to run the submit command.
      Never forget to include the `# Summary of Changes:` block before submitting. EVERY time you want to submit you MUST use the format described and PLEASE, do NOT explain every single thought you have when submitting.

      Remember, you should always include a SINGLE tool call/function call and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.
      If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first tool call, and then after receiving a response you'll be able to issue the second tool call.
      Note that the environment does NOT support interactive session commands (e.g., python, vim), so please do not invoke them.

      If you are working with C++ code, or C code, you MUST attempt to compile it using the `compile` tool before submitting. Do not submit code that fails to compile.
    instance_template: |-
      We're currently solving the following issue within our repository. Here's the issue text:
      ISSUE:
      {{problem_statement}}

      INSTRUCTIONS:
      Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.
      Remember, YOU SHOULD ALWAYS INCLUDE EXACTLY ONE TOOL CALL/FUNCTION CALL PER RESPONSE.

      IMPORTANT TIPS:

      1. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!

      2. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.

      3. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.

      4. Do not try to install any packages with `pip`, `conda`, or any other way. This will usually not work. If the environment is not set up correctly, try to fix the issue without executing python code or running any tests that require the package installed.
      
      5. Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with the python <script_name>.py`.

      6. Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION. If you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.
    
      7. If you are working with `.c` or `.cpp` files, you MUST use the `compile` tool to build your code and ensure it compiles without errors before attempting to submit.


      (Open file: {{open_file}})
      (Current directory: {{working_dir}})
      bash-$
    next_step_template: |-
      {{observation}}
      (Open file: {{open_file}})
      (Current directory: {{working_dir}})
      bash-$
    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
      (Open file: {{open_file}})
      (Current directory: {{working_dir}})
      bash-$
    #demonstration_template: |
    #  Here is a demonstration of how to correctly accomplish this task.
    #  It is included to show you how to correctly use the interface.
    #  You do not need to follow exactly what is done in the demonstration.
    #  --- DEMONSTRATION ---
    #  {{demonstration}}
    #  --- END OF DEMONSTRATION ---
    demonstrations:
      - trajectories/demonstrations/human_thought__swe-bench-HumanEvalFix-python__lcb__t-0.00__p-0.95__c-4.00__install-0/humanevalfix-python-0.traj
    put_demos_in_history: true
  model:
    name: hosted_vllm/Qwen3-14b
    api_base: https://dodi1408--openai-compatible-romoamigo-qwen-3-1-8b-serve.modal.run/v1
    api_key: ROISASUPERHOE
    per_instance_cost_limit: 0   # (2)!
    total_cost_limit: 0
    per_instance_call_limit: 100
    max_input_tokens: 0  # (3)!
    temperature: 0.3
  tools:
    enable_bash_tool: true
    bundles:
      - path: tools/registry
      - path: tools/defaults
      - path: tools/search
      - path: tools/edit_replace
      - path: tools/submit
      - path: tools/forfeit
      - path: tools/cbundle
    parse_function:
      type: function_calling
    env_variables:
      WINDOW: 150
      OVERLAP: 2