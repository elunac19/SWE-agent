agent:
  type: retry
  agent_configs:
    # +filemap
    - type: default
      model: &model
        name: hosted_vllm/Qwen3-8b
        api_base: https://riku-li--openai-compatible-romoamigo-qwen-3-1-8b-serve.modal.run/v1 #https://dodi1408--openai-compatible-romoamigo-qwen-3-1-8b-serve.modal.run/v1
        api_key: ROISASUPERHOE
        per_instance_cost_limit: 0   # (2)!
        total_cost_limit: 0
        per_instance_call_limit: 100
        max_input_tokens: 0  # (3)!
        temperature: 0.4
      templates:
        system_template: &system_template |-
          You are a helpful assistant working directly in the command line with a special interface.
          The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time and allows you to interact with the file system and other tools through function calls.
          for every response, you must include exactly ONE tool call/function call.

        instance_template: &instance_template |-
          
          <uploaded_files>
          {{working_dir}}
          </uploaded_files>
          
           I've uploaded a code repository in the directory {{working_dir}}. Consider the following PR description:
          
          <pr_description>
          {{problem_statement}}
          </pr_description>
          
          Can you help me implement the necessary changes to the repository so that the requirements specified in the <pr_description> are met?
          I've already taken care of all changes to any of the test files described in the <pr_description>. This means you DON'T have to modify the testing logic or any of the tests in any way!
          Your task is to make the minimal changes to non-tests files in the {{working_dir}} directory to ensure the <pr_description> is satisfied.
          
          Follow these steps to resolve the issue:
          1. As a first step, it might be a good idea to find and read code relevant to the <pr_description>. This is VERY import. Most issues are in EXISTING files, there are various tools and bash commands you can use to accomplish this.
          2. You could try to create a reproduction script.
          3. Edit the sourcecode of the repo to resolve the issue
          4. Think about edgecases and make sure your fix handles them as well

          While your thinking should be through, DO NOT output all of your thinking, keep it to a minimum. Instead of talking about the edits you want to do, just use tools to do them.
          Focus on doing actions NOT talking about doing the actions.
        next_step_template: &next_step_no_diff |-
          OBSERVATION:
          {{observation}}
          OPEN_FILE: {{open_file}}
          CURRENT_DIR: {{working_dir}})
        next_step_no_output_template: &next_step_no_output_no_diff |-
          Your last command ran successfully and did not produce any output.
      tools:
        execution_timeout: &execution_timeout 300
        bundles: &vanilla_bundles
          - path: tools/multilingual_setup
          - path: tools/registry
          - path: tools/windowed
          - path: tools/search
          - path: tools/edit_anthropic
          - path: tools/review_on_submit_m
          - path: tools/cbundle
          - path: tools/diff_state
        enable_bash_tool: true
        parse_function: &parse_function
          type: function_calling
        env_variables: &env_variables
          WINDOW: 100
          OVERLAP: 2
        registry_variables:
          SUBMIT_REVIEW_MESSAGES: &submit_review_messages
            - |
              Thank you for your work on this issue. Please carefully follow the steps below to help review your changes.

              1. Read your code carefully.
              2. Remove your reproduction script (if you haven't done so already).
              3. Ensure your code can be run OR compiled successfully. For C and C++ files, it is CRUCIAL to compile your code using the `compile` tool and verify there are no syntax errors.
              4. Run the submit command again to confirm.

              Here is a list of all of your changes:

              <diff>
              {{diff}}
              </diff>
      history_processors: &vanilla_history_processors
        - type: last_n_observations
          n: 5
    # + state
    - type: default
      model: *model
      templates:
        system_template: *system_template
        instance_template: *instance_template
        next_step_template: &next_step_with_diff |-
          {% if diff %}
          <diff>
          Your cumulative changes so far:
          {{diff}}
          </diff>

          {% endif %}
          The observation from the last command:
          {{observation}}
        next_step_no_output_template: &next_step_no_output_with_diff |-
          {% if diff %}
          <diff>
          Your cumulative changes so far:
          {{diff}}
          </diff>
          {% endif %}

          Your last command ran successfully and did not produce any output.
      tools:
        execution_timeout: *execution_timeout
        bundles: *vanilla_bundles
        enable_bash_tool: true
        parse_function: *parse_function
        env_variables: *env_variables
        registry_variables:
          SUBMIT_REVIEW_MESSAGES: *submit_review_messages
      history_processors: &diff_history_processors
        - type: remove_regex
          keep_last: 2
          remove:
            - "<diff>.*</diff>"
        - type: last_n_observations
          n: 5
  retry_loop:
    type: chooser
    max_attempts: 2
    cost_limit: 6.0
    chooser:
      system_template: |
        You are an expert software engineer reviewing code. Your thinking is very thorough, so it is ok if its very long.
      instance_template: |
        You will be given a problem statement and a list of patch submissions.

        Pick the most reasonable patch.
        The patch should solve the problem described in the problem statement in a way that is consistent with the rest of the codebase and the conventions of the codebase.

        Note: Disregard all testing code in the patch, as testing was already done in a separate step.
        Having a test in the patch does not make it any better.

        <IMPORTANT>The last line of your response should be the index of the patch you chose.
        You must choose a single index no matter what. If you cannot decide between two or more
        submissions, choose the first one of these.
        </IMPORTANT>

        Problem statement:
        {{problem_statement}}

        Submissions:
        {% for submission in submissions %}
        Submission {{loop.index0}}:

        {{submission}}

        {% endfor %}

        <IMPORTANT>The last line of your response should be the index of the patch you chose without any other text.</IMPORTANT>
      submission_template: |
        Patch:

        {{submission}}

        The final edited file with 30 lines of context:

        {{edited_files30}}
      max_len_submission: &chooser_max_len_submission 5000
      model:
        name: azure/gpt-4o-mini
        api_base: https://a0163-maq4fz41-eastus2.openai.azure.com/
        api_key: #AZURE_API_KEY"] EXPORT AZURE_API_KEY HERE
        api_version: 2025-01-01-preview
        per_instance_cost_limit: 0 # (2)!
        total_cost_limit: 0
        per_instance_call_limit: 100
        max_input_tokens: 0 # (3)!
        temperature: 0.3
