#!/usr/bin/env python3
import sys
import subprocess
from windowed_file import FileNotOpened, WindowedFile  # type: ignore


def compile_c_code(file_to_compile: str):
    compiler = ""
    if file_to_compile.endswith(".cpp"):
        compiler = "g++"
    elif file_to_compile.endswith(".c"):
        compiler = "gcc"
    else:
        print("Only use this command to compile .c or .cpp files!")
        sys.exit(1)

    compile_command = [compiler, file_to_compile]
    try:
        # compile
        process = subprocess.run(compile_command, check=True, capture_output=True, text=True)
        print(f"Compilation of '{file_to_compile}' successful.")
        if process.stderr:
            print(f"{compiler.upper()} warnings/errors:\n{process.stderr}")
        sys.exit(1) # not sure about exiting here but oh well
    except subprocess.CalledProcessError as e:
        print(f"Error compiling '{file_to_compile}':")
        print(e.stderr)

def main():
    if len(sys.argv) < 2:
        # if no argument is provided then there must be an open file or we are "cooked"
        try:
            wf = WindowedFile(exit_on_exception=False)
            path_to_file = wf.path
            compile_c_code(path_to_file)
        except FileNotOpened:
            print("No file opened. Use the command `open` to open file first.")
            sys.exit(1)

    compile_c_code(sys.argv[1])

if __name__ == "__main__":
    main()
